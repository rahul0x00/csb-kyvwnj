{"version":3,"sources":["core/conversion.js","components/nav/index.js","components/footer/index.js","pages/home/index.js","App.js","index.js"],"names":["getFragmentResult","input","isFractional","arguments","length","undefined","result","success","message","proceed","isValidInput","isNaN","parseFloat","validateBinary","binaryNumber","binary","decimal","binaryArray","Array","from","concat","power","j","digitFloat","parseInt","Math","pow","i","digitInt","convertToDecimal","decimalNumber","module","exports","getDecimal","inputParts","split","integralResult","fractionalResult","INVALID_MESSAGE","Navbar","react_default","a","createElement","react","className","href","target","rel","Footer","Date","getFullYear","Body","_useState","useState","_useState2","Object","slicedToArray","setBinary","_useState3","_useState4","setDecimal","useEffect","htmlFor","type","name","placeholder","value","onChange","e","Home","nav","home_Body","footer","App","pages_home","ReactDOM","render","src_App","document","querySelector"],"mappings":"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","file":"static/js/main.43f295c7.chunk.js","sourcesContent":["const INVALID_MESSAGE = \"Invalid input\";\n\nconst convertToDecimal = (binary, isFractional, proceed) => {\n    let decimal = 0;\n    const binaryArray = Array.from(`${binary}`);\n    if (!isFractional) {\n        for (let power = 0, i = binaryArray.length - 1; i >= 0; i--) {\n            const digitInt = parseInt(binaryArray[i]);\n            if (digitInt === 0 || digitInt === 1) {\n                decimal += digitInt * 2 ** power++;\n            } else {\n                decimal = null;\n                break;\n            }\n        }\n    } else {\n        for (let power = 1, j = 0; j < binaryArray.length; j++) {\n            const digitFloat = parseInt(binaryArray[j]);\n            if (digitFloat === 0 || digitFloat === 1) {\n                decimal += digitFloat / 2 ** power++;\n            } else {\n                decimal = null;\n                break;\n            }\n        }\n    }\n    proceed(decimal);\n};\n\nconst validateBinary = (input, proceed) => {\n    let isValidInput = false;\n    if (input && !isNaN(parseFloat(input))) {\n        isValidInput = true;\n    }\n    proceed(isValidInput ? input : null);\n};\n\nconst getFragmentResult = (input, isFractional = false) => {\n    const result = { success: false, message: INVALID_MESSAGE, };\n    if (input !== \"0\") {\n        validateBinary(input, (binaryNumber) => {\n            if (binaryNumber) {\n                convertToDecimal(binaryNumber, isFractional, (decimalNumber) => {\n                    if (decimalNumber) {\n                        result.success = true;\n                        result.message = decimalNumber;\n                    }\n                });\n            }\n        });\n    } else {\n        result.success = true;\n        result.message = 0;\n    }\n    return result;\n}\n\nconst getDecimal = (input) => {\n    const result = { success: false, message: INVALID_MESSAGE, };\n    if (input && input !== \"0\") {\n        const inputParts = input.split(\".\");\n        if (inputParts && inputParts.length <= 2) {\n            const integralResult = getFragmentResult(inputParts[0]);\n            if (integralResult.success) {\n                result.success = true;\n                result.message = integralResult.message;\n                if (inputParts[1]) {\n                    const fractionalResult = getFragmentResult(inputParts[1], true);\n                    if (fractionalResult.success) {\n                        result.message += fractionalResult.message;\n                    } else {\n                        result.success = false;\n                        result.message = INVALID_MESSAGE;\n                    }\n                }\n            }\n        }\n    } else if (input === \"0\") {\n        result.success = true;\n        result.message = 0;\n    }\n    return result;\n};\n\nmodule.exports = {\n    getDecimal,\n    INVALID_MESSAGE\n};\n","import React, { Fragment } from \"react\";\n\nconst Navbar = () => {\n    return (\n        <Fragment>\n            <nav className=\"navbar row\">\n                <div className=\"brandWrapper\">\n                    <h1 className=\"brand\">Bin2Dec</h1>\n                </div>\n                <div className=\"navLinksWrapper\">\n                    <ul className=\"navLinks row\">\n                        <li className=\"navLink\"><a href=\"/\">Home</a></li>\n                        <li className=\"navLink\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/rahul0x00/Bin2Dec\">GitHub</a></li>\n                    </ul>\n                </div>\n            </nav>\n        </Fragment>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\n\nconst Footer = () => {\n    return (\n        <div className=\"footer row\">\n            &#169;&nbsp;Copyrighted&nbsp;{new Date().getFullYear()}\n        </div>\n\n    );\n}\n\nexport default Footer;","import React, { Fragment, useState, useEffect } from \"react\";\nimport { getDecimal } from \"../../core/conversion\";\nimport Navbar from \"../../components/nav\";\nimport Footer from \"../../components/footer\";\nimport \"./index.css\";\n\nconst Home = () => {\n    return (\n        <Fragment>\n            <Navbar />\n            <Body />\n            <Footer />\n        </Fragment>\n    );\n}\n\nconst Body = () => {\n    const [binary, setBinary] = useState(\"\");\n    const [decimal, setDecimal] = useState(\"\");\n\n    useEffect(() => setDecimal(binary ? getDecimal(binary).message : \"\"), [binary]);\n\n    const changeBinary = (value) => setBinary(value === \".\" ? \"0.\" : value);\n\n    return (\n        <section className=\"hero col\">\n            <label htmlFor=\"txtBinaryNum\">\n                <strong>Converts Binary to Decimal</strong>\n            </label>\n            <div className=\"row divQuestion\">\n                <input type=\"text\" name=\"txtBinaryNum\" placeholder=\"Enter Binary..\"\n                    className=\"txtBinaryNum\" value={binary} onChange={(e) => changeBinary(e.target.value)} />\n            </div>\n            <div className=\"row divAnswer\">\n                <h1 className=\"headerAnswer\">{decimal}</h1>\n            </div>\n        </section>\n    );\n}\n\nexport default Home;","import React from \"react\";\nimport Home from \"./pages/home\";\n\nconst App = () => {\n    return (\n        <div className=\"container\">\n            <Home />\n        </div>\n    )\n};\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n\n"],"sourceRoot":""}